# Identity and access parameters
api_fingerprint      = "xx:xx:xx:xx:xx:xx:x:xx:x:x:x:x:x:x:x:x"
api_private_key_path = "~/.oci/path/to/oci_api_key.pem"

home_region = "ap-sydney-1"
region      = "ap-sydney-1"
tenancy_id  = "ocid1.tenancy.oc1..xxxxx"
user_id     = "ocid1.user.oc1..xxxxx"

# general oci parameters
compartment_id = "ocid1.compartment.oc1..xxxxx"
timezone       = "Australia/Sydney"

# ssh keys
ssh_private_key_path = "~/.ssh/id_ed25519"
ssh_public_key_path  = "~/.ssh/id_ed25519.pub"

# networking
create_vcn               = true
assign_dns               = true
lockdown_default_seclist = true
vcn_cidrs                = ["10.0.0.0/16"]
vcn_dns_label            = "oke"
vcn_name                 = "afid_oke"

# Subnets
subnets = {
  bastion  = { newbits = 13, netnum = 0, dns_label = "bastion", create = "always" }
  operator = { newbits = 13, netnum = 1, dns_label = "operator", create = "always" }
  cp       = { newbits = 13, netnum = 2, dns_label = "cp", create = "always" }
  int_lb   = { newbits = 11, netnum = 16, dns_label = "ilb", create = "always" }
  pub_lb   = { newbits = 11, netnum = 17, dns_label = "plb", create = "always" }
  workers  = { newbits = 2, netnum = 1, dns_label = "workers", create = "always" }
  pods     = { newbits = 2, netnum = 2, dns_label = "pods", create = "always" }
}

# bastion
create_bastion        = false
bastion_allowed_cidrs = ["0.0.0.0/0"]
bastion_user          = "opc"

# operator
create_operator      = true
operator_install_k9s = true


# iam
create_iam_operator_policy = "always"
create_iam_resources       = true

create_iam_tag_namespace = false // true/*false
create_iam_defined_tags  = false // true/*false
tag_namespace            = "afid_oke"
use_defined_tags         = false // true/*false

# cluster
create_cluster     = true
cluster_name       = "afid_oke"
cni_type           = "flannel"
kubernetes_version = "v1.32.1"
pods_cidr          = "10.244.0.0/16"
services_cidr      = "10.96.0.0/16"

# Worker pool defaults
worker_pool_size = 0
worker_pool_mode = "node-pool"

# Worker defaults
await_node_readiness = "none"

worker_pools = {
  static = {
    shape              = "VM.Standard.E4.Flex",
    ocpus              = 2,
    memory             = 16,
    size               = 2,
    boot_volume_size   = 200,
    kubernetes_version = "v1.32.1"
  }
  dynamic = {
    shape              = "VM.Standard.E4.Flex",
    ocpus              = 2,
    memory             = 16,
    size               = 1,
    boot_volume_size   = 200,
    kubernetes_version = "v1.32.1",
    autoscaling = {
      enabled  = true
      min_size = 1
      max_size = 4
    }
  }
}

# Security
allow_node_port_access            = false
allow_worker_internet_access      = true
allow_worker_ssh_access           = true
control_plane_allowed_cidrs       = ["0.0.0.0/0"]
control_plane_is_public           = true
assign_public_ip_to_control_plane = true
load_balancers                    = "both"
preferred_load_balancer           = "public"
kubeconfig_filename               = "~/.kube/oke-config"

# k8s
environment  = "dev"
core_tag     = "latest"
nextjs_tag   = "latest"
github_token = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

registry_org = "tknsunil"

# Oracle DB configuration
oracle_db_enabled                 = true
oracle_db_availability_domain     = ""
oracle_db_subnet_id               = ""
oracle_db_name                    = "ORCL"
oracle_db_display_name            = "OracleDB"
oracle_db_admin_password          = "xxxx"
oracle_db_version                 = "19.0.0.0"
oracle_db_edition                 = "STANDARD_EDITION"
oracle_db_license_model           = "LICENSE_INCLUDED"
oracle_db_shape                   = ""
oracle_db_storage_size_in_gb      = 256
oracle_db_storage_management      = "ASM"
oracle_db_character_set           = "AL32UTF8"
oracle_db_ncharacter_set          = "AL16UTF16"
oracle_db_pdb_name                = "PDB1"
oracle_db_workload                = "OLTP"
oracle_db_backup_subnet_id        = ""
oracle_db_backup_enabled          = true
oracle_db_backup_retention_days   = 7
oracle_db_auto_backup_window      = "SLOT_TWO"
oracle_db_recovery_window_in_days = 7
oracle_db_hostname                = "oracledb"
oracle_db_domain                  = "example.com"
oracle_db_node_count              = 1
oracle_db_time_zone               = "UTC"
oracle_db_auto_scaling_enabled    = false
oracle_db_is_free_tier            = false
oracle_db_private_endpoint_label  = "dbprivate"
oracle_db_defined_tags            = {}
oracle_db_freeform_tags           = {}

# PostgreSQL configuration
postgres_db_enabled              = false
postgres_db_namespace            = "postgres-db"
postgres_db_create_namespace     = true
postgres_db_storage_class        = "oci-bv"
postgres_db_pvc_size             = "8Gi"
postgres_db_version              = "15.3.0"
postgres_db_password             = "xxxx"
postgres_db_username             = "postgres"
postgres_db_database             = "postgres"
postgres_db_port                 = 5432
postgres_db_memory_limit         = "2Gi"
postgres_db_cpu_limit            = "1"
postgres_db_memory_request       = "1Gi"
postgres_db_cpu_request          = "500m"
postgres_db_ha_enabled           = false
postgres_db_replicas             = 2
postgres_db_metrics_enabled      = true
postgres_db_service_type         = "ClusterIP"
postgres_db_persistence_enabled  = true
postgres_db_backup_enabled       = false
postgres_db_backup_schedule      = "0 0 * * *"
postgres_db_backup_storage_class = "oci-bv"
postgres_db_backup_size          = "8Gi"


# Monitoring and OpenTelemetry
enable_monitoring      = true
enable_otel            = true
monitoring_namespace   = "monitoring"
otel_namespace         = "monitoring"
rabbitmq_namespace     = "default"
ingress_namespace      = "default"
cert_manager_namespace = "default"

# Helm chart versions
loki_helm_version           = "5.41.6"
grafana_helm_version        = "7.0.21"
vector_helm_version         = "0.28.0"
otel_collector_helm_version = "0.70.0"
tempo_helm_version          = "1.14.0"
rabbitmq_helm_version       = "12.0.3"
nginx_ingress_helm_version  = "4.8.3"
cert_manager_helm_version   = "v1.13.3"


# secrets
cloudflare_api_token = "xxx"

django_github_oauth_client_id     = "xxxx"
django_github_oauth_client_secret = "xxxx"
django_secret_key                 = "xxxx"
django_superuser_email            = "afid@afid.io"
django_superuser_password         = "xxxx"
django_superuser_username         = "afid"

dockercred_email           = "xxxx@xxxx.xxx"
dockercred_password        = "dckr_pat_xxxxxx"
dockercred_registry_server = "https://index.docker.io/v1/"
dockercred_username        = "xxxxx"

email_credentials_password = "xxxx"
email_credentials_username = "user@oci.com"

emtmlib_keys_key1 = "xxxxxxx"
emtmlib_keys_key2 = "xxxxxxx"

grafana_github_oauth_client_id     = "xxxxxx"
grafana_github_oauth_client_secret = "xxxxxx"

loki_bucket_creds_access_key = "xxxxxx"
loki_bucket_creds_secret_key = "xxxxxx"

maxmind_licence_key = "xxxxxx"

oracle_docker_creds_username        = "xxxxxx@xxxx.xxx"
oracle_docker_creds_registry_server = "container-registry.oracle.com"
oracle_docker_creds_password        = "xxxxxx"

oracle_db_pass         = "xxxxxxx"
postgres_auth_password = "xxxxxxx"

rabbitmq_auth_password      = "xxxxxxxx"
rabbitmq_auth_erlang_cookie = "xxxxxxxx"

s3_creds_access_key = "xxxxxxx"
s3_creds_secret_key = "xxxxxxx"

stereolib_keys_key1 = "xxxxxxx"
stereolib_keys_key2 = "xxxxxxx"


letsencrypt_cert_tls_key        = "certs/key.pem"
letsencrypt_account_key_tls_key = "certs/account_key.pem"
letsencrypt_cert_tls_crt        = "certs/cert.pem"


cloudflare_zone_id = "xxxxx"
app_subdomain      = "test.afid.io"


# Certificate configuration
letsencrypt_email  = "your-email@example.com"
letsencrypt_server = "https://acme-v02.api.letsencrypt.org/directory"

# Load Balancer configuration
create_load_balancer = false
# Will use the public load balancer subnet created by the network module
lb_subnet_ids     = []
lb_name_prefix    = "afid"
lb_min_bandwidth  = 10
lb_max_bandwidth  = 100
lb_is_private     = false
lb_nsg_ids        = []
lb_reserved_ip_id = ""

# Redis configuration
redis_enabled                   = false
redis_namespace                 = "default"
redis_create_namespace          = false
redis_release_name              = "redis"
redis_chart_version             = "17.9.5"
redis_architecture              = "standalone"
redis_full_name_override        = "afid-redis"
redis_auth_enabled              = false
redis_master_port               = 6379
redis_persistence_enabled       = true
redis_persistence_storage_class = "oci-bv"
redis_persistence_size          = "8Gi"
redis_metrics_enabled           = false
redis_service_type              = "ClusterIP"

# File Storage configuration
create_file_storage                 = true
file_storage_mount_target_name      = "afid-file-mount-target"
file_storage_hostname_label         = "afidfs"
file_storage_file_system_name       = "afid-file-system"
create_storage_class                = true
storage_class_name                  = "oci-fss"
storage_class_reclaim_policy        = "Delete"
create_file_storage_policy          = true
